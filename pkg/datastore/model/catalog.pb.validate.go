// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/datastore/model/catalog.proto

package model

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Catalog with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// CatalogMultiError, or nil if none found. Otherwise, only the first error is
// returned, if any.
func (m *Catalog) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := CatalogValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CatalogValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	if m.GetUpdatedAt() <= 0 {
		err := CatalogValidationError{
			field:  "UpdatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LastSynced

	// no validation rules for Url

	// no validation rules for Rootdir

	if len(errors) > 0 {
		return CatalogMultiError(errors)
	}
	return nil
}

// CatalogMultiError is an error wrapping multiple validation errors returned
// by Catalog.Validate(true) if the designated constraints aren't met.
type CatalogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CatalogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CatalogMultiError) AllErrors() []error { return m }

// CatalogValidationError is the validation error returned by Catalog.Validate
// if the designated constraints aren't met.
type CatalogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CatalogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CatalogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CatalogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CatalogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CatalogValidationError) ErrorName() string { return "CatalogValidationError" }

// Error satisfies the builtin error interface
func (e CatalogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCatalog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CatalogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CatalogValidationError{}

// Validate checks the field values on CatalogRepo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// CatalogRepoMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *CatalogRepo) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetPackages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = CatalogRepoValidationError{
					field:  fmt.Sprintf("Packages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return CatalogRepoMultiError(errors)
	}
	return nil
}

// CatalogRepoMultiError is an error wrapping multiple validation errors
// returned by CatalogRepo.Validate(true) if the designated constraints aren't met.
type CatalogRepoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CatalogRepoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CatalogRepoMultiError) AllErrors() []error { return m }

// CatalogRepoValidationError is the validation error returned by
// CatalogRepo.Validate if the designated constraints aren't met.
type CatalogRepoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CatalogRepoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CatalogRepoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CatalogRepoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CatalogRepoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CatalogRepoValidationError) ErrorName() string { return "CatalogRepoValidationError" }

// Error satisfies the builtin error interface
func (e CatalogRepoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCatalogRepo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CatalogRepoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CatalogRepoValidationError{}

// Validate checks the field values on Package with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// PackageMultiError, or nil if none found. Otherwise, only the first error is
// returned, if any.
func (m *Package) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := PackageValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	for idx, item := range m.GetCaps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = PackageValidationError{
					field:  fmt.Sprintf("Caps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = PackageValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return PackageMultiError(errors)
	}
	return nil
}

// PackageMultiError is an error wrapping multiple validation errors returned
// by Package.Validate(true) if the designated constraints aren't met.
type PackageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PackageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PackageMultiError) AllErrors() []error { return m }

// PackageValidationError is the validation error returned by Package.Validate
// if the designated constraints aren't met.
type PackageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackageValidationError) ErrorName() string { return "PackageValidationError" }

// Error satisfies the builtin error interface
func (e PackageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackageValidationError{}

// Validate checks the field values on Capability with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// CapabilityMultiError, or nil if none found. Otherwise, only the first error
// is returned, if any.
func (m *Capability) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Jsonschema

	if len(errors) > 0 {
		return CapabilityMultiError(errors)
	}
	return nil
}

// CapabilityMultiError is an error wrapping multiple validation errors
// returned by Capability.Validate(true) if the designated constraints aren't met.
type CapabilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CapabilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CapabilityMultiError) AllErrors() []error { return m }

// CapabilityValidationError is the validation error returned by
// Capability.Validate if the designated constraints aren't met.
type CapabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CapabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CapabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CapabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CapabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CapabilityValidationError) ErrorName() string { return "CapabilityValidationError" }

// Error satisfies the builtin error interface
func (e CapabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCapability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CapabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CapabilityValidationError{}

// Validate checks the field values on PackageVersion with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// PackageVersionMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *PackageVersion) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = PackageVersionValidationError{
					field:  fmt.Sprintf("Modules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return PackageVersionMultiError(errors)
	}
	return nil
}

// PackageVersionMultiError is an error wrapping multiple validation errors
// returned by PackageVersion.Validate(true) if the designated constraints
// aren't met.
type PackageVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PackageVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PackageVersionMultiError) AllErrors() []error { return m }

// PackageVersionValidationError is the validation error returned by
// PackageVersion.Validate if the designated constraints aren't met.
type PackageVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PackageVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PackageVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PackageVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PackageVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PackageVersionValidationError) ErrorName() string { return "PackageVersionValidationError" }

// Error satisfies the builtin error interface
func (e PackageVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPackageVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PackageVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PackageVersionValidationError{}

// Validate checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// ModuleMultiError, or nil if none found. Otherwise, only the first error is
// returned, if any.
func (m *Module) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetHelm()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ModuleValidationError{
				field:  "Helm",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if v, ok := interface{}(m.GetKube()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ModuleValidationError{
				field:  "Kube",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return ModuleMultiError(errors)
	}
	return nil
}

// ModuleMultiError is an error wrapping multiple validation errors returned by
// Module.Validate(true) if the designated constraints aren't met.
type ModuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModuleMultiError) AllErrors() []error { return m }

// ModuleValidationError is the validation error returned by Module.Validate if
// the designated constraints aren't met.
type ModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleValidationError) ErrorName() string { return "ModuleValidationError" }

// Error satisfies the builtin error interface
func (e ModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleValidationError{}

// Validate checks the field values on HelmModule with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// HelmModuleMultiError, or nil if none found. Otherwise, only the first error
// is returned, if any.
func (m *HelmModule) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Repo

	// no validation rules for Name

	// no validation rules for Version

	if len(errors) > 0 {
		return HelmModuleMultiError(errors)
	}
	return nil
}

// HelmModuleMultiError is an error wrapping multiple validation errors
// returned by HelmModule.Validate(true) if the designated constraints aren't met.
type HelmModuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HelmModuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HelmModuleMultiError) AllErrors() []error { return m }

// HelmModuleValidationError is the validation error returned by
// HelmModule.Validate if the designated constraints aren't met.
type HelmModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelmModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelmModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelmModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelmModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelmModuleValidationError) ErrorName() string { return "HelmModuleValidationError" }

// Error satisfies the builtin error interface
func (e HelmModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelmModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelmModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelmModuleValidationError{}

// Validate checks the field values on KubeModule with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// KubeModuleMultiError, or nil if none found. Otherwise, only the first error
// is returned, if any.
func (m *KubeModule) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Url

	if len(errors) > 0 {
		return KubeModuleMultiError(errors)
	}
	return nil
}

// KubeModuleMultiError is an error wrapping multiple validation errors
// returned by KubeModule.Validate(true) if the designated constraints aren't met.
type KubeModuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubeModuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubeModuleMultiError) AllErrors() []error { return m }

// KubeModuleValidationError is the validation error returned by
// KubeModule.Validate if the designated constraints aren't met.
type KubeModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubeModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubeModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubeModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubeModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubeModuleValidationError) ErrorName() string { return "KubeModuleValidationError" }

// Error satisfies the builtin error interface
func (e KubeModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubeModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubeModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubeModuleValidationError{}
