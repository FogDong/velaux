// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/datastore/model/application.proto

package model

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned. When asked to return all errors, validation continues after
// first violation, and the result is a list of violation errors wrapped in
// ApplicationMultiError, or nil if none found. Otherwise, only the first
// error is returned, if any.
func (m *Application) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ApplicationValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedAt() <= 0 {
		err := ApplicationValidationError{
			field:  "UpdatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	// no validation rules for Env

	for idx, item := range m.GetComponents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = ApplicationValidationError{
					field:  fmt.Sprintf("Components[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return ApplicationMultiError(errors)
	}
	return nil
}

// ApplicationMultiError is an error wrapping multiple validation errors
// returned by Application.Validate(true) if the designated constraints aren't met.
type ApplicationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationMultiError) AllErrors() []error { return m }

// ApplicationValidationError is the validation error returned by
// Application.Validate if the designated constraints aren't met.
type ApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationValidationError) ErrorName() string { return "ApplicationValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationValidationError{}

// Validate checks the field values on ApplicationComponent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in ApplicationComponentMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *ApplicationComponent) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ApplicationComponentValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return ApplicationComponentMultiError(errors)
	}
	return nil
}

// ApplicationComponentMultiError is an error wrapping multiple validation
// errors returned by ApplicationComponent.Validate(true) if the designated
// constraints aren't met.
type ApplicationComponentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationComponentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationComponentMultiError) AllErrors() []error { return m }

// ApplicationComponentValidationError is the validation error returned by
// ApplicationComponent.Validate if the designated constraints aren't met.
type ApplicationComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationComponentValidationError) ErrorName() string {
	return "ApplicationComponentValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationComponentValidationError{}

// Validate checks the field values on ApplicationTrait with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in ApplicationTraitMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *ApplicationTrait) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if v, ok := interface{}(m.GetProperties()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = ApplicationTraitValidationError{
				field:  "Properties",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return ApplicationTraitMultiError(errors)
	}
	return nil
}

// ApplicationTraitMultiError is an error wrapping multiple validation errors
// returned by ApplicationTrait.Validate(true) if the designated constraints
// aren't met.
type ApplicationTraitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationTraitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationTraitMultiError) AllErrors() []error { return m }

// ApplicationTraitValidationError is the validation error returned by
// ApplicationTrait.Validate if the designated constraints aren't met.
type ApplicationTraitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationTraitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationTraitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationTraitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationTraitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationTraitValidationError) ErrorName() string { return "ApplicationTraitValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationTraitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationTrait.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationTraitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationTraitValidationError{}
