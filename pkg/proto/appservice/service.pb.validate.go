// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/proto/appservice/service.proto

package appservice

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on PutApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in PutApplicationRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *PutApplicationRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetApp()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = PutApplicationRequestValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return PutApplicationRequestMultiError(errors)
	}
	return nil
}

// PutApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by PutApplicationRequest.Validate(true) if the designated
// constraints aren't met.
type PutApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutApplicationRequestMultiError) AllErrors() []error { return m }

// PutApplicationRequestValidationError is the validation error returned by
// PutApplicationRequest.Validate if the designated constraints aren't met.
type PutApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutApplicationRequestValidationError) ErrorName() string {
	return "PutApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutApplicationRequestValidationError{}

// Validate checks the field values on PutApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in PutApplicationResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *PutApplicationResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutApplicationResponseMultiError(errors)
	}
	return nil
}

// PutApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by PutApplicationResponse.Validate(true) if the designated
// constraints aren't met.
type PutApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutApplicationResponseMultiError) AllErrors() []error { return m }

// PutApplicationResponseValidationError is the validation error returned by
// PutApplicationResponse.Validate if the designated constraints aren't met.
type PutApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutApplicationResponseValidationError) ErrorName() string {
	return "PutApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutApplicationResponseValidationError{}

// Validate checks the field values on GetApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetApplicationRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetApplicationRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetApplicationRequestMultiError(errors)
	}
	return nil
}

// GetApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by GetApplicationRequest.Validate(true) if the designated
// constraints aren't met.
type GetApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationRequestMultiError) AllErrors() []error { return m }

// GetApplicationRequestValidationError is the validation error returned by
// GetApplicationRequest.Validate if the designated constraints aren't met.
type GetApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationRequestValidationError) ErrorName() string {
	return "GetApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationRequestValidationError{}

// Validate checks the field values on GetApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in GetApplicationResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *GetApplicationResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetApp()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = GetApplicationResponseValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return GetApplicationResponseMultiError(errors)
	}
	return nil
}

// GetApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by GetApplicationResponse.Validate(true) if the designated
// constraints aren't met.
type GetApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationResponseMultiError) AllErrors() []error { return m }

// GetApplicationResponseValidationError is the validation error returned by
// GetApplicationResponse.Validate if the designated constraints aren't met.
type GetApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationResponseValidationError) ErrorName() string {
	return "GetApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationResponseValidationError{}

// Validate checks the field values on ListApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in ListApplicationsRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *ListApplicationsRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListApplicationsRequestMultiError(errors)
	}
	return nil
}

// ListApplicationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListApplicationsRequest.Validate(true) if the designated
// constraints aren't met.
type ListApplicationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsRequestMultiError) AllErrors() []error { return m }

// ListApplicationsRequestValidationError is the validation error returned by
// ListApplicationsRequest.Validate if the designated constraints aren't met.
type ListApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsRequestValidationError) ErrorName() string {
	return "ListApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsRequestValidationError{}

// Validate checks the field values on ListApplicationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in ListApplicationsResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *ListApplicationsResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = ListApplicationsResponseValidationError{
					field:  fmt.Sprintf("Apps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return ListApplicationsResponseMultiError(errors)
	}
	return nil
}

// ListApplicationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListApplicationsResponse.Validate(true) if the
// designated constraints aren't met.
type ListApplicationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsResponseMultiError) AllErrors() []error { return m }

// ListApplicationsResponseValidationError is the validation error returned by
// ListApplicationsResponse.Validate if the designated constraints aren't met.
type ListApplicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsResponseValidationError) ErrorName() string {
	return "ListApplicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsResponseValidationError{}

// Validate checks the field values on DelApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in DelApplicationRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *DelApplicationRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DelApplicationRequestMultiError(errors)
	}
	return nil
}

// DelApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by DelApplicationRequest.Validate(true) if the designated
// constraints aren't met.
type DelApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelApplicationRequestMultiError) AllErrors() []error { return m }

// DelApplicationRequestValidationError is the validation error returned by
// DelApplicationRequest.Validate if the designated constraints aren't met.
type DelApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelApplicationRequestValidationError) ErrorName() string {
	return "DelApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DelApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelApplicationRequestValidationError{}

// Validate checks the field values on DelApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in DelApplicationResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *DelApplicationResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelApplicationResponseMultiError(errors)
	}
	return nil
}

// DelApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by DelApplicationResponse.Validate(true) if the designated
// constraints aren't met.
type DelApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelApplicationResponseMultiError) AllErrors() []error { return m }

// DelApplicationResponseValidationError is the validation error returned by
// DelApplicationResponse.Validate if the designated constraints aren't met.
type DelApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelApplicationResponseValidationError) ErrorName() string {
	return "DelApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DelApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelApplicationResponseValidationError{}
