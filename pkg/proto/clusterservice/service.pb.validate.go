// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/proto/clusterservice/service.proto

package clusterservice

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on PutClusterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PutClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutClusterRequestValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PutClusterRequestValidationError is the validation error returned by
// PutClusterRequest.Validate if the designated constraints aren't met.
type PutClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutClusterRequestValidationError) ErrorName() string {
	return "PutClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutClusterRequestValidationError{}

// Validate checks the field values on PutClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PutClusterResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PutClusterResponseValidationError is the validation error returned by
// PutClusterResponse.Validate if the designated constraints aren't met.
type PutClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutClusterResponseValidationError) ErrorName() string {
	return "PutClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutClusterResponseValidationError{}

// Validate checks the field values on GetClusterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// GetClusterRequestValidationError is the validation error returned by
// GetClusterRequest.Validate if the designated constraints aren't met.
type GetClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterRequestValidationError) ErrorName() string {
	return "GetClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterRequestValidationError{}

// Validate checks the field values on GetClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetClusterResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClusterResponseValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetClusterResponseValidationError is the validation error returned by
// GetClusterResponse.Validate if the designated constraints aren't met.
type GetClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterResponseValidationError) ErrorName() string {
	return "GetClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterResponseValidationError{}

// Validate checks the field values on ListClustersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListClustersRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListClustersRequestValidationError is the validation error returned by
// ListClustersRequest.Validate if the designated constraints aren't met.
type ListClustersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClustersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClustersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClustersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClustersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClustersRequestValidationError) ErrorName() string {
	return "ListClustersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListClustersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClustersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClustersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClustersRequestValidationError{}

// Validate checks the field values on ListClustersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListClustersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetClusters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClustersResponseValidationError{
					field:  fmt.Sprintf("Clusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListClustersResponseValidationError is the validation error returned by
// ListClustersResponse.Validate if the designated constraints aren't met.
type ListClustersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClustersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClustersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClustersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClustersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClustersResponseValidationError) ErrorName() string {
	return "ListClustersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListClustersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClustersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClustersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClustersResponseValidationError{}

// Validate checks the field values on DelClusterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DelClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// DelClusterRequestValidationError is the validation error returned by
// DelClusterRequest.Validate if the designated constraints aren't met.
type DelClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelClusterRequestValidationError) ErrorName() string {
	return "DelClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DelClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelClusterRequestValidationError{}

// Validate checks the field values on DelClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DelClusterResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DelClusterResponseValidationError is the validation error returned by
// DelClusterResponse.Validate if the designated constraints aren't met.
type DelClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelClusterResponseValidationError) ErrorName() string {
	return "DelClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DelClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelClusterResponseValidationError{}
